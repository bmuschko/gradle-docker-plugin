Gradle Docker plugin
====================

image:https://d3oypxn00j2a10.cloudfront.net/0.12.6/img/nav/docker-logo-loggedout.png[Docker Logo]

Gradle plugin for managing link:https://www.docker.io/[Docker] images and containers using via its
link:http://docs.docker.io/reference/api/docker_remote_api/[remote API]. The heavy lifting of communicating with the
Docker remote API is handled by the link:https://github.com/docker-java/docker-java[Docker Java library]. Please
refer to the library's documentation for more information on the supported Docker's client API and Docker server version.

*This plugin requires Gradle >= 2.5 to work properly.*

link:https://snap-ci.com/bmuschko/gradle-docker-plugin/branch/master[image:https://snap-ci.com/bmuschko/gradle-docker-plugin/branch/master/build_image[Build Image]]

== Usage

To use the plugin, include in your build script:

[source,groovy]
----
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.4'
    }
}
----


== Provided plugins

The JAR file comes with two plugins:

[options="header"]
|=======
|Plugin Id                            |Automatically applies          |Type                                                                                                                                                        |Description
|com.bmuschko.docker-remote-api       |-                              |link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/DockerRemoteApiPlugin.html[DockerRemoteApiPlugin]             |Provides custom tasks for interacting with Docker via its remote API.
|com.bmuschko.docker-java-application |com.bmuschko.docker-remote-api |link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/DockerJavaApplicationPlugin.html[DockerJavaApplicationPlugin] |Creates and pushes a Docker image for a Java application.
|=======

== Remote API plugin

The plugin `com.bmuschko.docker-remote-api` allows for interacting with Docker via its remote API. You can model any workflow
imaginable by creating enhanced task of the custom task provided by the plugin. To use the plugin, include the following
code snippet in your build script:

[source,groovy]
----
apply plugin: 'com.bmuschko.docker-remote-api'
----

The plugin automatically resolves the Docker Java library with the pre-configured version under the covers. The only
configuration you will have to provide in your build script is the repository hosting the library and its transitive
dependencies. One repository that hosts them all is Maven Central.

[source,groovy]
----
repositories {
    mavenCentral()
}
----

=== Custom task types

==== Misc

The plugin provides the following general-purpose custom task types:

[options="header"]
|=======
|Type                                                                                                                                  |Description
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/DockerInfo.html[DockerInfo]       |Displays system-wide information.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/DockerVersion.html[DockerVersion] |Show the docker version information.
|=======


==== Images

The plugin provides the following custom task types for managing images:

[options="header"]
|=======
|Type                                                                                                                                                  |Description
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/Dockerfile.html[Dockerfile]                 |Creates a Dockerfile based on the provided instructions.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerBuildImage.html[DockerBuildImage]     |Builds an image from a Dockerfile.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerCommitImage.html[DockerCommitImage]   |Creates a new image from a container's changes.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerInspectImage.html[DockerInspectImage] |Returns low-level information on the image.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerListImages.html[DockerListImages]     |Lists images in registry.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerPullImage.html[DockerPullImage]       |Pulls an image from the registry.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerPushImage.html[DockerPushImage]       |Pushes an image to a registry.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerRemoveImage.html[DockerRemoveImage]   |Removes an image from the filesystem.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/image/DockerTagImage.html[DockerTagImage]         |Tags an image in registry.
|=======


==== Containers

The plugin provides the following custom task types for managing containers:

[options="header"]
|=======
|Type                                                                                                                                                                        |Description
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerCopyFileToContainer.html[DockerCopyFileToContainer] |Copies a path from the host into the container.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerCopyFileFromContainer.html[DockerCopyFileFromContainer] |Copies a path from the container as a tar file on to the host.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerCreateContainer.html[DockerCreateContainer]             |Creates a container.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerInspectContainer.html[DockerInspectContainer]           |Returns low-level information on the container.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerKillContainer.html[DockerKillContainer]                 |Kills the container for a given id.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerRemoveContainer.html[DockerRemoveContainer]             |Removes the container for a given id from the filesystem.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerRestartContainer.html[DockerRestartContainer]           |Restarts the container for a given id.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerStartContainer.html[DockerStartContainer]               |Starts the container for a given id.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerStopContainer.html[DockerStopContainer]                 |Stops the container for a given id.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerWaitContainer.html[DockerWaitContainer]                 |Blocks until container for a given id stops.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerLogsContainer.html[DockerLogsContainer]                 |Copies the container output to the Gradle process standard out/err.
|link:http://bmuschko.github.io/gradle-docker-plugin/docs/groovydoc/com/bmuschko/gradle/docker/tasks/container/DockerExecContainer.html[DockerExecContainer]                 |Executes a command within a running container.
|=======


=== Extension properties

The plugin defines the following extension properties in the `docker` closure:

[options="header"]
|=======
|Property name   |Type      |Default value            |Description
|`url`           |String    |http://localhost:2375    |The server URL to connect to via Docker's remote API.
|`certPath`      |File      |null                     |The path to certificates for communicating with link:https://docs.docker.com/articles/https/[Docker over SSL].
|`apiVersion`    |String    |null                     |The remote API version. For most cases this can be left null.
|=======

Image pull or push operations against the public Docker Hub registry or a private registry may require authentication.
You can provide those credentials in the `registryCredentials` closure:

[options="header"]
|=======
|Property name   |Type      |Default value               |Description
|`url`           |String    |https://index.docker.io/v1  |The registry URL.
|`username`      |String    |null                        |The registry username.
|`password`      |String    |null                        |The registry password.
|`email`         |String    |null                        |The registry email address.
|=======


==== Extension examples

===== Working with a TLS-enabled Docker instance

Starting with Docker version 1.3, TLS is enabled by default. Please consult the Docker documentation link:https://docs.docker.com/articles/https/["Running Docker
with https"] to set up your certificate. The following example demonstrates how to configure the plugin to use those certificates.
Additionally, this code snippet shows how to set the user credentials.

[source,groovy]
----
docker {
    url = 'https://192.168.59.103:2376'
    certPath = new File(System.properties['user.home'], '.boot2docker/certs/boot2docker-vm')

    registryCredentials {
        url = 'https://index.docker.io/v1'
        username = 'bmuschko'
        password = 'pwd'
        email = 'benjamin.muschko@gmail.com'
    }
}
----

===== Working with a Docker instance without TLS

The following example assumes that you disabled TLS on your Docker instance. You can do so by setting `DOCKER_TLS=no` in the file
 `/var/lib/boot2docker/profile`. Additionally, this code snippet shows how to set the user credentials.

[source,groovy]
----
docker {
    url = 'http://192.168.59.103:2375'
}
----
On Unix the Docker daemon listens by default on `unix:///var/run/docker.sock`.

=== Usage examples

The following usage examples demonstrate code for common use cases. More scenarios can be found in the link:https://github.com/bmuschko/gradle-docker-plugin/blob/master/src/functTest/groovy/com/bmuschko/gradle/docker/DockerWorkflowFunctionalTest.groovy[functional tests].

==== Creating a Dockerfile and building an image

A Dockerfile can be created by the `Dockerfile` custom tasks. The Dockerfile instructions need to be declare in the correct
order.

[source,groovy]
----
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/mydockerfile/Dockerfile')
    from 'ubuntu:12.04'
    maintainer 'Benjamin Muschko "benjamin.muschko@gmail.com"'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'bmuschko/myimage'
}
----

==== Starting a container, and waiting for the application in the container to start up

To support, for example, integration testing tasks within a Gradle project using Docker we can start a container and can then 
wait for the application the start running before running the integration tests from the Gradle script.
It does this by looking for something in the docker console log that matches the regular expression provided. 

[source,groovy]
----
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task startContainer(type: DockerLogsContainer) {
    dependsOn startContainer
    targetContainerId { startContainer.getContainerId() }
    
    poller('(?ms).*snippet', 10, 10)
}                

----

=== Reactive-Streams

As needed, we will implement reactive methods as described in link:https://github.com/reactive-streams/reactive-streams-jvm[reactive-streams]. We implement these here as optional closures for all tasks. Currently the only supported method is `onError`.

A typical use-case is when one wants to remove a container thay may/may-not be present. In the example below, we check the thrown exception to see if it contains the string 'No such container'. If it does we silently ignore the exception, otherwise we re-throw it.

[source,groovy]
----
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*

task removeContainer(type: DockerRemoveContainer) {
    targetContainerId { "container-that-does-not-exist" }
    onError { exception ->
        if (!exception.message.contains('No such container')) 
            throw exception
    }
}
----

=======

==== Executing functional tests against a running container

The following example code demonstrates how to build a Docker image from a Dockerfile, starts up a container for this
image and exercises functional tests against the running container. At the end of this operation, the container is stopped.

[source,groovy]
----
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

task buildMyAppImage(type: DockerBuildImage) {
    inputDir = file('docker/myapp')
    tag = 'test/myapp'
}

task createMyAppContainer(type: DockerCreateContainer) {
    dependsOn buildMyAppImage
    targetImageId { buildMyAppImage.getImageId() }
    portBindings = ['8080:8080']
}

task startMyAppContainer(type: DockerStartContainer) {
    dependsOn createMyAppContainer
    targetContainerId { createMyAppContainer.getContainerId() }
}

task stopMyAppContainer(type: DockerStopContainer) {
    targetContainerId { createMyAppContainer.getContainerId() }
}

task functionalTestMyApp(type: Test) {
    dependsOn startMyAppContainer
    finalizedBy stopMyAppContainer
}
----


== Java application plugin

The plugin `com.bmuschko.docker-java-application` is a highly opinonated plugin for projects applying the link:http://www.gradle.org/docs/current/userguide/application_plugin.html[application plugin].
Under the covers the plugin preconfigures tasks for creating and pushing Docker images for your Java application. The default
configuration is tweakable via an exposed extension. To use the plugin, include the following code snippet in your build script:

[source,groovy]
----
apply plugin: 'com.bmuschko.docker-java-application'
----


=== Extension properties

The plugin defines the following extension properties in the `javaApplication` closure:

[options="header"]
|=======
|Property name   |Type      |Default value                                         |Description
|`baseImage`     |String    |java                                                  |The Docker base image used for Java application.
|`maintainer`    |String    |Value of `user.home` system property                  |The name and email address of the image maintainer.
|`port`          |Integer   |8080                                                  |The Docker image entry point port used for the Java application (Deprecated)
|`ports`         |Integer[] |[]                                                    |The Docker image exposed ports (if provided, this values will override `port` configuration property)
|`tag`           |String    |<project.group>/<applicationName>:<project.version>   |The tag used for the Docker image.
|=======


=== Usage example

[source,groovy]
----
docker {
    javaApplication {
        baseImage = 'dockerfile/java:openjdk-7-jre'
        maintainer = 'Benjamin Muschko "benjamin.muschko@gmail.com"'
        ports = [9090, 5701]
        tag = 'jettyapp:1.115'
    }
}
----


=== Default tasks

The plugin provides a set of tasks for your project and preconfigures them with sensible defaults.

[options="header"]
|=======
|Task name                 |Depends On                |Type                                                                                 |Description
|`dockerCopyDistResources` |`distTar`                 |link:http://www.gradle.org/docs/current/javadoc/org/gradle/api/tasks/Copy.html[Copy] |Copies the resource files (like the Java application's TAR file) to a temporary directory for image creation.
|`dockerDistTar`           |`dockerCopyDistResources` |Dockerfile                                                                           |Creates the Docker image for the Java application.
|`dockerBuildImage`        |`dockerDistTar`           |DockerBuildImage                                                                     |Builds the Docker image for the Java application.
|`dockerPushImage`         |`dockerBuildImage`        |DockerPushImage                                                                      |Pushes created Docker image to the repository.
|=======


=== Usage examples

The following usage examples demonstrate code for common use cases. More scenarios can be found in the link:https://github.com/bmuschko/gradle-docker-plugin/blob/master/src/functTest/groovy/com/bmuschko/gradle/docker/DockerJavaApplicationPluginFunctionalTest.groovy[functional tests].

[source,groovy]
----
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'

version = '1.0'
sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.eclipse.jetty.aggregate:jetty-all:9.2.5.v20141112'
}

mainClassName = 'com.bmuschko.gradle.docker.application.JettyMain'

docker {
    javaApplication {
        maintainer = 'Jon Doe "jon.doe@gmail.com"'
    }
}
----

== FAQ

=== Executing the plugin's test suite with custom configuration

Functional tests that are executed against a Docker instance assume a specific setup. This setup
uses the Docker server URL `http://localhost:2375` with TLS being disabled. The default setup can be configured with the
help of system properties shown in the table below:

[options="header"]
|=======
|Description                 |System property          |Default Value
|Docker server URL           |dockerServerUrl          |http://localhost:2375
|Docker cert path            |dockerCertPath           |null
|Docker private registry URL |dockerPrivateRegistryUrl |http://localhost:5000
|=======

The following usage example demonstrates running the tests against a Docker instance using HTTPS:

[source,shell]
----
./gradlew build -DdockerServerUrl=https://192.168.59.103:2376 -DdockerCertPath=/Users/ben/.boot2docker/certs/boot2docker-vm
----

**Note:** At the moment the plugin code does not support executing the tests against a Docker instance with TLS enabled.

==== Using a Vagrant box to bootstrap Docker

Docker does not need to be installed on the local or another remote machine. This project provides a
link:https://www.vagrantup.com/[Vagrant] image with the proper setup to bootstrap a Docker installation. The
link:https://github.com/bmuschko/gradle-docker-plugin/blob/master/vagrant/Vagrantfile[Vagrantfile] can be found under
the directory `vagrant`. To use the Vagrant box simply start it manually.

[source,shell]
----
vagrant up
----

==== Automatically starts and stop Vagrant box for executing functional tests

An installation of VirtualBox and Vagrant is required. See the link:https://www.vagrantup.com/docs/getting-started/["Getting Started"]
guide for more information.

Alternatively, you can configure the project to bootstrap the Vagrant box
as needed. Use the command line option `-PbootstrapDocker=true` for this purpose.

[source,shell]
----
./gradlew functionalTest -PbootstrapDocker=true
----
